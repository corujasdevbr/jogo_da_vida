{"version":3,"sources":["components/posicaoMapa.js","components/mapa.js","App.js","serviceWorker.js","index.js","assets/imgs/tabuleiros-curvas_analist_devops.jpg"],"names":["useStyles","makeStyles","theme","posicao","props","position","top","left","borderRadius","backgroundColor","PosicaoMapa","classes","className","container","textAlign","color","right","Mapa","src","url","alt","style","width","App","useState","quantCasas","setQuantCasas","setPosicao","posicoes","type","value","onChange","e","target","onClick","parseInt","length","alert","andar","voltar","height","imageMapa","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"iOAIMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,QAAS,SAAAC,GAAK,MAAK,CACfC,SAAU,WACVC,IAAKF,EAAME,IACXC,KAAMH,EAAMG,KACZC,aAAc,OACdC,gBAAiB,YAaVC,MARf,SAAqBN,GACjB,IAAMO,EAAUX,EAAUI,GAE1B,OACI,yBAAKQ,UAAWD,EAAQR,SAAxB,sBCfFH,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCW,UAAW,CACPR,SAAU,WACVS,UAAW,SACXC,MAAO,SAEXZ,QAAS,CACLE,SAAU,WACVC,IAAK,MACLU,MAAO,OACPR,aAAc,OACdC,gBAAiB,WAgBVQ,MAXf,SAAcb,GACV,IAAMO,EAAUX,EAAUI,GAE1B,OACI,yBAAKQ,UAAWD,EAAQE,WACpB,yBAAKK,IAAKd,EAAMe,IAAKC,IAAI,OAAOC,MAAO,CAAEC,MAAO,UAChD,kBAAC,EAAD,CAAShB,IAAKF,EAAME,IAAKC,KAAMH,EAAMG,S,gBC6BlCgB,MA/Cf,SAAanB,GAAQ,IAAD,EACkBoB,mBAAS,GAD3B,mBACXC,EADW,KACCC,EADD,OAEYF,mBAAS,GAFrB,mBAEXrB,EAFW,KAEFwB,EAFE,OAGcH,mBAAS,CAAC,CACxClB,IAAK,QACLC,KAAM,SACL,CACDD,IAAK,QACLC,KAAM,SACL,CACDD,IAAK,QACLC,KAAM,SACL,CACDD,IAAK,QACLC,KAAM,WAdU,mBAGXqB,EAHW,KAqClB,OArCkB,KAsChB,6BACE,2BAAOC,KAAK,SAASC,MAAOL,EAAYM,SAAU,SAACC,GAAD,OAAON,EAAcM,EAAEC,OAAOH,UAChF,4BAAQI,QAAS,kBAvBP,WACZ,GAAIC,SAAShC,GAAWgC,SAASV,IAAeG,EAASQ,OAGvD,OAFAC,MAAM,6CACNV,EAAWC,EAASQ,OAAS,GAI/BT,EAAWQ,SAAShC,GAAWgC,SAASV,IAgBfa,KAAvB,SACA,4BAAQJ,QAAS,kBAdN,WACb,GAAIC,SAAShC,GAAWgC,SAASV,GAAc,EAG7C,OAFAY,MAAM,qCACNV,EAAW,GAIbA,EAAWQ,SAAShC,GAAWgC,SAASV,IAOfc,KAAvB,UACA,kBAAC,EAAD,CAAMjB,MAAM,OAAOkB,OAAO,QAAQrB,IAAKsB,IAAWnC,IAAKsB,EAASzB,GAASG,IAAKC,KAAMqB,EAASzB,GAASI,SCtCxFmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,8D","file":"static/js/main.b9cf89c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    posicao: props => ({\r\n        position: 'absolute',\r\n        top: props.top,\r\n        left: props.left,\r\n        borderRadius: '10px',\r\n        backgroundColor: 'red',\r\n    })\r\n}));\r\n\r\n\r\nfunction PosicaoMapa(props) {\r\n    const classes = useStyles(props);\r\n\r\n    return (\r\n        <div className={classes.posicao}>Você esta aqui</div>\r\n    )\r\n}\r\n\r\nexport default PosicaoMapa;","import React from 'react';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Posicao from './posicaoMapa';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        position: 'relative',\r\n        textAlign: 'center',\r\n        color: 'white',\r\n    },\r\n    posicao: {\r\n        position: 'absolute',\r\n        top: '8px',\r\n        right: '16px',\r\n        borderRadius: '10px',\r\n        backgroundColor: 'red',\r\n    }\r\n}));\r\n\r\n\r\nfunction Mapa(props) {\r\n    const classes = useStyles(props);\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <img src={props.url} alt=\"Snow\" style={{ width: '100%' }} />\r\n            <Posicao top={props.top} left={props.left} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mapa;","import React, { useState } from 'react';\nimport './App.css';\nimport Mapa from './components/mapa';\n\n\n\nimport imageMapa from './assets/imgs/tabuleiros-curvas_analist_devops.jpg'\n\nfunction App(props) {\n  const [quantCasas, setQuantCasas] = useState(0);\n  const [posicao, setPosicao] = useState(0);\n  const [posicoes, setPosicoes] = useState([{\n    top: '175px',\n    left: '435px'\n  }, {\n    top: '130px',\n    left: '570px'\n  }, {\n    top: '100px',\n    left: '716px'\n  }, {\n    top: '100px',\n    left: '860px'\n  }]);\n\n  const andar = () => {\n    if (parseInt(posicao) + parseInt(quantCasas) >= posicoes.length) {\n      alert('Parabéns, você concluiu o jogo');\n      setPosicao(posicoes.length - 1);\n      return;\n    }\n\n    setPosicao(parseInt(posicao) + parseInt(quantCasas));\n  }\n\n  const voltar = () => {\n    if (parseInt(posicao) - parseInt(quantCasas) < 0) {\n      alert('Você voltou a estaca zero');\n      setPosicao(0);\n      return;\n    }\n\n    setPosicao(parseInt(posicao) - parseInt(quantCasas));\n  }\n\n  return (\n    <div>\n      <input type=\"number\" value={quantCasas} onChange={(e) => setQuantCasas(e.target.value)} />\n      <button onClick={() => andar()}>Andar</button>\n      <button onClick={() => voltar()}>Voltar</button>\n      <Mapa width='100%' height='100vh' url={imageMapa} top={posicoes[posicao].top} left={posicoes[posicao].left} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tabuleiros-curvas_analist_devops.48cb1c9e.jpg\";"],"sourceRoot":""}